package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.Converter;
import ru.itmo.wp.model.domain.Entity;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public abstract class BasicRepositoryImpl {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

     <T extends Entity> void saveBasic(Map<String, String> parameters, String Sql, T t) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(Sql, Statement.RETURN_GENERATED_KEYS)) {
                for (Map.Entry<String, String> entry : parameters.entrySet()) {
                    statement.setString(Integer.parseInt(entry.getKey()), entry.getValue());
                }
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save.");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        t.setId(generatedKeys.getLong(1));
                        t.setCreationTime(find(t.getId()).getCreationTime());
                    } else {
                        throw new RepositoryException("Can't save [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save.", e);
        }
    }

   public abstract <T extends Entity> T find(long id);

    <T> T findBasic(Map<String, String> parameters, Converter<T> converter, String Sql) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(Sql)) {
                //statement.setLong(1, id);
                for (Map.Entry<String, String> entry : parameters.entrySet()) {
                    statement.setString(Integer.parseInt(entry.getKey()), entry.getValue());
                }
//                if (statement.executeUpdate() != 1) {
//                    throw new RepositoryException("Can't savegegewgeg.");
//                }
                try (ResultSet resultSet = statement.executeQuery()) {
                    return converter.convert(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find ", e);
        }
    }

    //public abstract convert

    <T> List<T> findBasicAll(Converter<T> converter, String Table) {
        List<T> ts = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(Table)) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    T t;
                    while ((t = converter.convert(statement.getMetaData(), resultSet)) != null) {
                        ts.add(t);
                    }
                    return ts;
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find .", e);
        }
    }

}