package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.User;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.UserRepository;

import javax.sql.DataSource;
import java.sql.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserRepositoryImpl extends BasicRepositoryImpl implements UserRepository {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();
    private final UserConverter userConverter = new UserConverter();



    @Override
    public User find(long id) {
            Map<String, String> parameter = new HashMap<>();
            parameter.put(String.valueOf(1), String.valueOf(id));
            return (User) findBasic(parameter, userConverter, "SELECT * FROM User WHERE id=?");
    }

    @Override
    public User findByEmail(String email) {
        Map<String, String> parameter = new HashMap<>();
        parameter.put(String.valueOf(1), String.valueOf(email));
        return (User) findBasic(parameter, userConverter, "SELECT * FROM User WHERE email=?");
    }

    @Override
    public User findByLogin(String login) {
        Map<String, String> parameter = new HashMap<>();
        parameter.put(String.valueOf(1), String.valueOf(login));
        return (User) findBasic(parameter, userConverter, "SELECT * FROM User WHERE login=?");
    }

    @Override
    public User findByLoginOrEmailAndPasswordSha(String loginOrEmail, String passwordSha) {
        Map<String, String> parameter = new HashMap<>();
        parameter.put(String.valueOf(1), String.valueOf(loginOrEmail));
        parameter.put(String.valueOf(2), String.valueOf(loginOrEmail));
        parameter.put(String.valueOf(3), String.valueOf(passwordSha));
        return (User) findBasic(parameter, userConverter, "SELECT * FROM User WHERE (login=? OR email=?) AND passwordSha=?");
    }

    @Override
    public long findCount() {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT COUNT (*) FROM User")) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        return resultSet.getLong(1);
                    } else {
                        throw new RepositoryException("Can't get the number of users");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't count users.", e);
        }
    }

    public List<User> findAll() {
        return (List<User>) findBasicAll(userConverter, "SELECT * FROM User ORDER BY id DESC");
    }

    public void save(User user, String passwordSha) {
        Map<String, String> parameter = new HashMap<>();
        parameter.put(String.valueOf(1), user.getLogin());
        parameter.put(String.valueOf(2), passwordSha);
        parameter.put(String.valueOf(3), user.getEmail());
        String sql = "INSERT INTO `User` (`login`, `passwordSha`, `email`, `creationTime`) VALUES (?, ?, ?, NOW())";
        saveBasic(parameter, sql, user);
    }
//    @Override
//    public void save(User user, String passwordSha) {
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("INSERT INTO `User` (`login`, `passwordSha`, `email`, `creationTime`) VALUES (?, ?, ?, NOW())", Statement.RETURN_GENERATED_KEYS)) {
//                statement.setString(1, user.getLogin());
//                statement.setString(2, passwordSha);
//                statement.setString(3, user.getEmail());
//                if (statement.executeUpdate() != 1) {
//                    throw new RepositoryException("Can't save User.");
//                } else {
//                    ResultSet generatedKeys = statement.getGeneratedKeys();
//                    if (generatedKeys.next()) {
//                        user.setId(generatedKeys.getLong(1));
//                        user.setCreationTime(find(user.getId()).getCreationTime());
//                    } else {
//                        throw new RepositoryException("Can't save User [no autogenerated fields].");
//                    }
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't save User.", e);
//        }
//    }
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM User WHERE (login=? OR email=?) AND passwordSha=?")) {
//                statement.setString(1, loginOrEmail);
//                statement.setString(2, loginOrEmail);
//                statement.setString(3, passwordSha);
//                try (ResultSet resultSet = statement.executeQuery()) {
//                    return userConverter.convert(statement.getMetaData(), resultSet);
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't find User.", e);
//        }

//    @Override
//    public User findByEmail(String email) {
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM User WHERE email=?")) {
//                statement.setString(1, email);
//                try (ResultSet resultSet = statement.executeQuery()) {
//                    return userConverter.convert(statement.getMetaData(), resultSet);
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't find Email.", e);
//        }
//    }


//    @Override
//    public User findByLogin(String login) {
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM User WHERE login=?")) {
//                statement.setString(1, login);
//                try (ResultSet resultSet = statement.executeQuery()) {
//                    return userConverter.convert(statement.getMetaData(), resultSet);
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't find User.", e);
//        }
//    }

//    @Override
//    public User findByLoginOrEmailAndPasswordSha(String loginOrEmail, String passwordSha) {
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM User WHERE (login=? OR email=?) AND passwordSha=?")) {
//                statement.setString(1, loginOrEmail);
//                statement.setString(2, loginOrEmail);
//                statement.setString(3, passwordSha);
//                try (ResultSet resultSet = statement.executeQuery()) {
//                    return userConverter.convert(statement.getMetaData(), resultSet);
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't find User.", e);
//        }
//    }

//    @Override
//    public List<User> findAll() {
//        List<User> users = new ArrayList<>();
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM User ORDER BY id DESC")) {
//                try (ResultSet resultSet = statement.executeQuery()) {
//                    User user;
//                    while ((user = userConverter.convert(statement.getMetaData(), resultSet)) != null) {
//                        users.add(user);
//                    }
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't find User.", e);
//        }
//        return users;
//    }

}
