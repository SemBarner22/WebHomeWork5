package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Event;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.EventRepository;

import javax.sql.DataSource;
import java.sql.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventRepositoryImpl extends BasicRepositoryImpl implements EventRepository {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();
    private final EventConverter eventConverter = new EventConverter();

//    @Override
//    public void save(Event event) {
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("INSERT INTO `Event` (`userId`, `type`, `creationTime`) VALUES (?, ?, NOW())", Statement.RETURN_GENERATED_KEYS)) {
//                statement.setLong(1, event.getUserId());
//                statement.setString(2, event.getType().name());
//                if (statement.executeUpdate() != 1) {
//                    throw new RepositoryException("Can't save Event.");
//                } else {
//                    ResultSet generatedKeys = statement.getGeneratedKeys();
//                    if (generatedKeys.next()) {
//                        event.setId(generatedKeys.getLong(1));
//                        event.setCreationTime(find(event.getId()).getCreationTime());
//                    } else {
//                        throw new RepositoryException("Can't save Event [no autogenerated fields].");
//                    }
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't save User.", e);
//        }
//    }

    public void save(Event event) {
        Map<String, String> parameter = new HashMap<>();
        parameter.put(String.valueOf(1), String.valueOf(event.getUserId()));
        parameter.put(String.valueOf(2), event.getType().name());
        String sql = "INSERT INTO `Event` (`userId`, `type`, `creationTime`) VALUES (?, ?, NOW())";
        saveBasic(parameter, sql, event);
    }


    @Override
    public void changeStatus(Event.Status status, long userId) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("UPDATE Event SET type=? WHERE userId=?")) {
                statement.setString(1, status.name());
                statement.setLong(2, userId);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save Event.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

//    UPDATE Article SET userId=10 WHERE id=7

    public Event find(long id) {
        Map<String, String> parameter = new HashMap<>();
        parameter.put(String.valueOf(1), String.valueOf(id));
        return (Event) findBasic(parameter, eventConverter, "SELECT * FROM Event WHERE id=?");
    }

    public List<Event> findAll() {
        return (List<Event>) findBasicAll(eventConverter, "SELECT * FROM Event");
    }

    //    public void changeStatus(Event.Status status, long userId) {
//        Map<String, String> parameter = new HashMap<>();
//        parameter.put(String.valueOf(1), (status.name()));
//        parameter.put(String.valueOf(2), String.valueOf((userId)));
//        return (Event) findBasic(parameter, eventConverter, "UPDATE Event SET type=? WHERE userId=?");
//    }

//    public Event find(long id) {
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Event WHERE id=?")) {
//                statement.setLong(1, id);
//                try (ResultSet resultSet = statement.executeQuery()) {
//                    return eventConverter.convert(statement.getMetaData(), resultSet);
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't find Event.", e);
//        }
//    }

}
