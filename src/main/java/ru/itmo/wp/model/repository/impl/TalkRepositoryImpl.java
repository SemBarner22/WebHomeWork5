package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Talk;
import ru.itmo.wp.model.repository.TalkRepository;

import javax.sql.DataSource;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TalkRepositoryImpl extends BasicRepositoryImpl implements TalkRepository {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();
    private final TalkConverter talkConverter = new TalkConverter();

//    @Override
//    public void save(Talk talk) {
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("INSERT INTO `Talk` (`sourceUserId`, `targetUserId`, `text`, `creationTime`) VALUES (?, ?, ?, NOW())", Statement.RETURN_GENERATED_KEYS)) {
//                statement.setLong(1, talk.getSourceUserId());
//                statement.setLong(2, talk.getTargetUserId());
//                statement.setString(3, talk.getText());
//                if (statement.executeUpdate() != 1) {
//                    throw new RepositoryException("Can't save Talk.");
//                } else {
//                    ResultSet generatedKeys = statement.getGeneratedKeys();
//                    if (generatedKeys.next()) {
//                        talk.setId(generatedKeys.getLong(1));
//                        talk.setCreationTime(find(talk.getId()).getCreationTime());
//                    } else {
//                        throw new RepositoryException("Can't save Event [no autogenerated fields].");
//                    }
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't save Talk.", e);
//        }
//    }

    public Talk find(long id) {
        Map<String, String> parameter = new HashMap<>();
        parameter.put(String.valueOf(1), String.valueOf(id));
        return (Talk) findBasic(parameter, talkConverter, "SELECT * FROM Talk WHERE id=?");
    }

    public List<Talk> findAll() {
        return (List<Talk>) findBasicAll(talkConverter, "SELECT * FROM Talk");
    }

    public void save(Talk talk) {
        Map<String, String> parameter = new HashMap<>();
        parameter.put(String.valueOf(1), String.valueOf(talk.getSourceUserId()));
        parameter.put(String.valueOf(2), String.valueOf(talk.getTargetUserId()));
        parameter.put(String.valueOf(3), talk.getText());
        String sql = "INSERT INTO `Talk` (`sourceUserId`, `targetUserId`, `text`, `creationTime`) VALUES (?, ?, ?, NOW())";
        saveBasic(parameter, sql, talk);
    }
            //                    if (generatedKeys.next()) {
//                        t.setId(generatedKeys.getLong(1));
//                        t.setCreationTime(find(event.getId()).getCreationTime());
//                    } else {
//                        throw new RepositoryException("Can't save Event [no autogenerated fields].");
//                    }

//    public Talk find(long id) {
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Talk WHERE id=?")) {
//                statement.setLong(1, id);
//                try (ResultSet resultSet = statement.executeQuery()) {
//                    return talkConverter.convert(statement.getMetaData(), resultSet);
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't find Talk.", e);
//        }
//    }
//
//    @Override
//    public List<Talk> findAll() {
//        List<Talk> talks = new ArrayList<>();
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Talk")) {
//                try (ResultSet resultSet = statement.executeQuery()) {
//                    Talk talk;
//                    while ((talk = talkConverter.convert(statement.getMetaData(), resultSet)) != null) {
//                        talks.add(talk);
//                    }
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't find Talks.", e);
//        }
//        return talks;
//    }

//    public String findbyUserId(long userId) {
//        try (Connection connection = DATA_SOURCE.getConnection()) {
//            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Talk")) {
//                try (ResultSet resultSet = statement.executeQuery()) {
//                    Talk talk;
//                    while ((talk = toTalk(statement.getMetaData(), resultSet)) != null) {
//                        talks.add(talk);
//                    }
//                }
//            }
//        } catch (SQLException e) {
//            throw new RepositoryException("Can't find Talks.", e);
//        }
//        return talks;
//    }

//    private Talk convert(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
//    }

}
